A. Linking the local machine to the git account
Answer:
 link your local machine to your Git account, follow these steps:

    Install Git: If not installed, download and install Git from git-scm.com.

    Set your Git username and email:

    bash

git config --global user.name "Your Name"
git config --global user.email "your-email@example.com"

Generate SSH keys (recommended method):

    Open your terminal and run:

    bash

    ssh-keygen -t rsa -b 4096 -C "your-email@example.com"

    Press enter to use the default file location and add a passphrase if desired.

Add SSH key to your GitHub account:

    Copy your public SSH key:

    bash

    cat ~/.ssh/id_rsa.pub (file location )

    Add it to your GitHub account by navigating to Settings â†’ SSH and GPG keys.

Verify the connection:

bash

    ssh -T git@github.com

This completes the linking process via SSH, providing secure and easy access to your repositories.


B. (Mostly) Using Cloning HTTPS to Work

Cloning a repository using HTTPS is common when you want a secure but straightforward method to copy a Git repository to your local machine.

    Clone a repository using HTTPS:
        Copy the HTTPS URL from your repository (usually found under the green "Code" button on GitHub).
        Run the following command in your terminal:

        bash

    git clone https://github.com/username/repository.git

Switch branches (if needed):

bash

    git checkout branch_name

Using HTTPS ensures encrypted data transfer between your local machine and GitHub but may require you to enter your credentials often unless you set up a credential manager.


C. Forking
What is Forking?

    Forking is the process of creating a copy of someone else's repository under your GitHub account. It allows you to make changes without affecting the original project.

Importance of Forking:

    Forking is essential for:
        Contributing to Open Source: Fork the original repository to work on features, fixes, or improvements without impacting the main repository.
        Custom Development: It allows you to modify a project to suit your needs while keeping your changes separate.
        Independent Experimentation: Forking provides a sandbox for experimentation without interfering with the main project.



D. Git Cheat Sheets
Pull:

    Pull combines fetch and merge. It retrieves updates from a remote branch and merges them into your local branch.

    bash

    git pull origin branch_name

Fetch:

    Fetch downloads updates from the remote repository but does not merge them. You must manually review and merge them.

    bash

    git fetch origin

Commit:

    Commit saves your changes to your local repository with a message describing what you did.

    bash

    git add .
    git commit -m "Your commit message"


E.Working with Friends

When collaborating with friends, follow these steps to ensure smooth contributions without affecting the main/master repository:

    Create a new branch for changes:

    bash

git checkout -b new_feature_branch

    This keeps your changes separate from the main codebase.

Make your changes on the new branch and commit as necessary.

Push your branch to the remote repository:

bash

    git push origin new_feature_branch

    Create a Pull Request (PR):
        Go to your repository on GitHub, and you will see a notification to create a pull request.
        Add a description of your changes and submit the PR.

    Code Review:
        Your friends or the repository owner can review the changes before merging them into the main branch.

    Pull without affecting the main repository:
        Before starting new work, always fetch and pull the latest changes from the main branch to keep your work up-to-date.

    Resolving conflicts:
        If there are any conflicts, Git will notify you, and you can manually resolve them.

By working with branches and pull requests, you and your friends can collaborate efficiently without affecting the stability of the main repository.


F. Having problems while authentication: 
  While cloining git might have problem with authentication and your git user name and password may not be the solution to that
INSTEAD,
  username remains the same 
  however, the passcode this is asking is your device key (generate in step one)
and you have to GO

Settings>Developer Settings> Personal access tokens> classic {ENABLE} and add  your key
